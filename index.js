//Modules - Why ?
//Modules are used when application grows bigger and we want split the code into multiple files. Each module may contact a set of functions or classes or  blocks
// import {sayHi} from './sayHi';
// sayHi('John');

//Errors
//Try Catch is useful for capturing runtime errors
//Try Catch will not work in scheduled tasks like setTimeOut
//error (it can be any custom name) is to capture the error object generated by java script
// try {
//   alert('I am inside try');
//   xyz;
//   alert('This is end of try block');
// } catch (error) {
//   alert('This is catch or error block: ' + error);
// }

//Custom error to perform business logic validations
let json = '{"age":30}';
try {
  let user = JSON.parse(json);
  if (!user.name) {
    throw new SyntaxError('User name doesnt exist');
  }
  alert(user.name);
} catch (error) {
  alert('Json Error: ' + error.message);
}

//JS Best Practices
//===================
//1. Avoid global variables (var, functions, objects), avoid new key word, avoid ==, avoid eval()
//2. Use local variabes using let & const
//3. Do all declarations on top - this will avoid re-declaration and better readability
//4. Initialize Variables (with "", 0, [], {}) so that the purpose of the variable is known
//5. Declare objects with const => this will avoid accidental change of the type
//6. In function declarations use default values for paramerters
//Example: function sum (a=1,b=1) {return a+b}
//7. Use default case in Switch statements

//Common Mistakes
//===================
//1. Accidental use of assignment operator "=" instead of a comparison operator "==="
//2. While addition & concatenation we should use appropriate data type
//Ex: let y = 10; y+= "5" should not be used which is a confusing one
//3.To be care while dealing with floats:
//Ex: let x = 0.1, y=0.2; let z = x+y will not be 0.3
// alert(0.1 + 0.2); //it is not equal to exact 0.3 but it is 0.3++++
// alert((0.1 * 10 + 0.2 * 10) / 10); //this give exact 0.3
//4. For Breaking of string into next line, we have to use \ to avoid breaking
//5. Mispacing of the semicolin; ex: if(x==19); {} => code block gets executed irrespective of vaue of x
//6. Breaking of code into multiple line is allowed. Only breaking of string has to be taken care with back slash \

//Performance
//===================
//1. Reduce activity in Loops
//Ex: for (i=0; i<arr.length; i++) {} => bad practice
//Ex: let l = arr.length; for (i=0;i<l;i++) {} => best practice
//2. Dont access DOM frequently/reduce usage. Get the dom element once into a local variable and reduce
//Ex: const obj = document.getElementById("container")
//obj.innerHTML = "This is a container"
//3. Keep no of HTML elements in a DOM to a minimum
//4. Dont create too many variables
//5. Keep java script tag towards the end of the HMTL document so that document is first loaded befor script run.

//Debugging
//===================
//syntax error and logical errors
//1. console.log
//2. debugger keyword can be placed inside java script file at desired place and it stop the execution at that point and we can analyze the issue

//Java Script Testing (automated testing with Mocha)
